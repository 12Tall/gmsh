# Gmsh - Copyright (C) 1997-2017 C. Geuzaine, J.-F. Remacle
#
# See the LICENSE.txt file for license information. Please report all
# bugs and problems to the public mailing list <gmsh@onelab.info>.

# This file defines the Gmsh Pyhton API.
#
# Do not edit it directly: it is automatically generated by `api/gen.py'.
#
# By design, the Gmsh Pyhton API is purely functional, and only uses elementary
# types (as well as `numpy' arrays if `numpy' is avaiable). A C++ as well a
# pure C API are also automatically generated by `api/gen.py': see `gmsh.h'
# and `gmshc.h'.
#
# See `gmsh/demos/api' for examples on how to use the Gmsh API. In particular,
# this directory contains C++ and Python versions of several of the `.geo'
# tutorials from `gmsh/tutorials'.

from ctypes import *
import signal
import os
import platform
from math import pi

signal.signal(signal.SIGINT,signal.SIG_DFL)
libdir = os.path.dirname(os.path.realpath(__file__))
if platform.system() == 'Windows':
    lib = CDLL(libdir+"/gmshc.dll")
elif platform.system() == 'Darwin':
    lib = CDLL(libdir+"/libgmshc.dylib")
else:
    lib = CDLL(libdir+"/libgmshc.so")

use_numpy = False
try :
    import numpy2
    use_numpy = True
    try : 
        from weakref import finalize as weakreffinalize
    except :
        from backports.weakref import finalize as weakreffinalize
except :
    pass

def _ostring(s) :
    sp = s.value.decode("utf-8")
    lib.gmshFree(s)
    return sp

def _ovectorpair(ptr,size):
    if use_numpy :
        v = numpy.ctypeslib.as_array(ptr, (size//2,2))
        weakreffinalize(v, lib.gmshFree, ptr)
    else :
        v = list((ptr[i*2],ptr[i*2+1]) for i in range(size//2))
        lib.gmshFree(ptr)
    return v

def _ovectorint(ptr,size):
    if use_numpy :
        v = numpy.ctypeslib.as_array(ptr, (size,))
        weakreffinalize(v, lib.gmshFree, ptr)
    else :
        v = list(ptr[i] for i in range(size))
        lib.gmshFree(ptr)
    return v

def _ovectordouble(ptr,size):
    if use_numpy :
        v = numpy.ctypeslib.as_array(ptr, (size,))
        weakreffinalize(v, lib.gmshFree, ptr)
    else :
        v = list(ptr[i] for i in range(size))
        lib.gmshFree(ptr)
    return v


def _ovectorvectorint(ptr,size,n):
    v = [_ovectorint(pointer(ptr[i].contents),size[i]) for i in range(n.value)]
    lib.gmshFree(size)
    lib.gmshFree(ptr)
    return v

def _ovectorvectorpair(ptr,size,n):
    v = [_ovectorpair(pointer(ptr[i].contents),size[i]) for i in range(n.value)]
    lib.gmshFree(size)
    lib.gmshFree(ptr)
    return v

def _ivectorint(o):
    if use_numpy :
        return  numpy.ascontiguousarray(o,numpy.int32).ctypes, c_size_t(len(o))
    else :
        return (c_int*len(o))(*o), c_size_t(len(o))

def _ivectorvectorint(os):
    n = len(os)
    parrays = [_ivectorint(o) for o in os]
    sizes = (c_size_t*n)(*(a[1] for a in parrays))
    arrays = (POINTER(c_int)*n)(*(cast(a[0],POINTER(c_int)) for a in parrays))
    size = c_size_t(n)
    return arrays, sizes, size

def _ivectorvectordouble(os):
    n = len(os)
    parrays = [_ivectordouble(o) for o in os]
    sizes = (c_size_t*n)(*(a[1] for a in parrays))
    arrays = (POINTER(c_double)*n)(*(cast(a[0],POINTER(c_double)) for a in parrays))
    size = c_size_t(n)
    return arrays, sizes, size

def _ivectordouble(o):
    if use_numpy :
        return  numpy.ascontiguousarray(o,numpy.float64).ctypes, c_size_t(len(o))
    else :
        return (c_double*len(o))(*o), c_size_t(len(o))

def _ivectorpair(o):
    if use_numpy :
        return  numpy.ascontiguousarray(o,numpy.int32).reshape(len(o),2).ctypes, c_size_t(len(o)*2)
    else :
        return ((c_int*2)*len(o))(*o), c_size_t(len(o)*2)

def _iargcargv(o) :
    return c_int(len(o)), (c_char_p*len(o))(*(s.encode() for s in o))


def initialize(argv):
    """
    Initializes Gmsh. This must be called before any call to the other
    functions in the API. If argc and argv are provided, they will be handled
    in the same way as the command line arguments in the Gmsh app.
    """
    api_argc_, api_argv_ = _iargcargv(argv)
    ierr = c_int()
    lib.gmshInitialize(
        api_argc_, api_argv_,
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshInitialize returned non-zero error code : ",
            ierr.value)

def finalize():
    """
    Finalizes Gmsh. This must be called when you are done using the Gmsh API.
    """
    ierr = c_int()
    lib.gmshFinalize(
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshFinalize returned non-zero error code : ",
            ierr.value)

def open(fileName):
    """
    Opens a file and adds one (or more) new model(s). Equivalent to the
    `File->Open' menu in the Gmsh app. Handling of the file depends on its
    extension and/or its contents.
    """
    ierr = c_int()
    lib.gmshOpen(
        c_char_p(fileName.encode()),
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshOpen returned non-zero error code : ",
            ierr.value)

def merge(fileName):
    """
    Merges a file. Equivalent to the `File->Merge' menu in the Gmsh app.
    Handling of the file depends on its extension and/or its contents.
    """
    ierr = c_int()
    lib.gmshMerge(
        c_char_p(fileName.encode()),
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshMerge returned non-zero error code : ",
            ierr.value)

def write(fileName):
    """
    Writes a file. The export format is determined by the file extension.
    """
    ierr = c_int()
    lib.gmshWrite(
        c_char_p(fileName.encode()),
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshWrite returned non-zero error code : ",
            ierr.value)

def clear():
    """
    Clears all loaded models and post-processing data, and adds a new empty
    model.
    """
    ierr = c_int()
    lib.gmshClear(
        byref(ierr))
    if ierr.value != 0 :
        raise ValueError(
            "gmshClear returned non-zero error code : ",
            ierr.value)


class option:
    """
    Global option handling functions
    """

    @staticmethod
    def setNumber(name,value):
        """
        Sets a numerical option to `value'. `name' is of the form "category.option"
        or "category[num].option". Available categories and options are listed in
        the Gmsh reference manual.
        """
        ierr = c_int()
        lib.gmshOptionSetNumber(
            c_char_p(name.encode()),
            c_double(value),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshOptionSetNumber returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def getNumber(name):
        """
        Gets the `value' of a numerical option.

        return value
        """
        api_value_ = c_double()
        ierr = c_int()
        lib.gmshOptionGetNumber(
            c_char_p(name.encode()),
            byref(api_value_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshOptionGetNumber returned non-zero error code : ",
                ierr.value)
        return api_value_.value

    @staticmethod
    def setString(name,value):
        """
        Sets a string option to `value'.
        """
        ierr = c_int()
        lib.gmshOptionSetString(
            c_char_p(name.encode()),
            c_char_p(value.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshOptionSetString returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def getString(name):
        """
        Gets the `value' of a string option.

        return value
        """
        api_value_ = c_char_p()
        ierr = c_int()
        lib.gmshOptionGetString(
            c_char_p(name.encode()),
            byref(api_value_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshOptionGetString returned non-zero error code : ",
                ierr.value)
        return _ostring(api_value_)


class model:
    """
    Per-model functions
    """

    @staticmethod
    def add(name):
        """
        Adds a new model, with name `name', and sets it as the current model.
        """
        ierr = c_int()
        lib.gmshModelAdd(
            c_char_p(name.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelAdd returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def remove():
        """
        Removes the current model.
        """
        ierr = c_int()
        lib.gmshModelRemove(
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelRemove returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def list():
        """
        Lists the names of all models.

        return names
        """
        api_names_, api_names_n_ = POINTER(c_char_p)(), c_size_t()
        ierr = c_int()
        lib.gmshModelList(
            byref(api_names_), byref(api_names_n_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelList returned non-zero error code : ",
                ierr.value)
        return _ovectorstring(api_names_, api_names_n_.value)

    @staticmethod
    def setCurrent(name):
        """
        Sets the current model to the model with name `name'. If several models
        have the same name, selects the one that was added first.
        """
        ierr = c_int()
        lib.gmshModelSetCurrent(
            c_char_p(name.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelSetCurrent returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def getEntities(dim=-1):
        """
        Gets all the (elementary) geometrical entities in the current model. If
        `dim' is >= 0, returns only the entities of the specified dimension (e.g.
        points if `dim' == 0). The entities are returned as a vector of (dim, tag)
        integer pairs.

        return dimTags
        """
        api_dimTags_, api_dimTags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshModelGetEntities(
            byref(api_dimTags_), byref(api_dimTags_n_),
            c_int(dim),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetEntities returned non-zero error code : ",
                ierr.value)
        return _ovectorpair(api_dimTags_, api_dimTags_n_.value)

    @staticmethod
    def getPhysicalGroups(dim=-1):
        """
        Gets all the physical groups in the current model. If `dim' is >= 0,
        returns only the entities of the specified dimension (e.g. physical points
        if `dim' == 0). The entities are returned as a vector of (dim, tag) integer
        pairs.

        return dimTags
        """
        api_dimTags_, api_dimTags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshModelGetPhysicalGroups(
            byref(api_dimTags_), byref(api_dimTags_n_),
            c_int(dim),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetPhysicalGroups returned non-zero error code : ",
                ierr.value)
        return _ovectorpair(api_dimTags_, api_dimTags_n_.value)

    @staticmethod
    def getEntitiesForPhysicalGroup(dim,tag):
        """
        Gets the tags of all the (elementary) geometrical entities making up the
        physical group of dimension `dim' and tag `tag'.

        return tags
        """
        api_tags_, api_tags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshModelGetEntitiesForPhysicalGroup(
            c_int(dim),
            c_int(tag),
            byref(api_tags_),byref(api_tags_n_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetEntitiesForPhysicalGroup returned non-zero error code : ",
                ierr.value)
        return _ovectorint(api_tags_,api_tags_n_.value)

    @staticmethod
    def addPhysicalGroup(dim,tags,tag=-1):
        """
        Adds a physical group of dimension `dim', grouping the elementary entities
        with tags `tags'. The function returns the tag of the physical group, equal
        to `tag' if `tag' is positive, or a new tag if `tag' < 0.

        return int
        """
        api_tags_, api_tags_n_ = _ivectorint(tags)
        ierr = c_int()
        api__result__ = lib.gmshModelAddPhysicalGroup(
            c_int(dim),
            api_tags_, api_tags_n_,
            c_int(tag),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelAddPhysicalGroup returned non-zero error code : ",
                ierr.value)
        return api__result__

    @staticmethod
    def setPhysicalName(dim,tag,name):
        """
        Sets the name of the physical group of dimension `dim' and tag `tag'.
        """
        ierr = c_int()
        lib.gmshModelSetPhysicalName(
            c_int(dim),
            c_int(tag),
            c_char_p(name.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelSetPhysicalName returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def getPhysicalName(dim,tag):
        """
        Gets the name of the physical group of dimension `dim' and tag `tag'.

        return name
        """
        api_name_ = c_char_p()
        ierr = c_int()
        lib.gmshModelGetPhysicalName(
            c_int(dim),
            c_int(tag),
            byref(api_name_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetPhysicalName returned non-zero error code : ",
                ierr.value)
        return _ostring(api_name_)

    @staticmethod
    def getBoundary(dimTags,combined=True,oriented=True,recursive=False):
        """
        Gets the boundary of the geometrical entities `dimTags'. Returns in
        `outDimTags' the boundary of the individual entities (if `combined' is
        false) or the boundary of the combined geometrical shape formed by all
        input entities (if `combined' is true). Returns tags multiplied by the sign
        of the boundary entity if `oriented' is true. Applies the boundary operator
        recursively down to dimension 0 (i.e. to points) if `recursive' is true.

        return outDimTags
        """
        api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
        api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshModelGetBoundary(
            api_dimTags_, api_dimTags_n_,
            byref(api_outDimTags_), byref(api_outDimTags_n_),
            c_int(bool(combined)),
            c_int(bool(oriented)),
            c_int(bool(recursive)),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetBoundary returned non-zero error code : ",
                ierr.value)
        return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

    @staticmethod
    def getEntitiesInBoundingBox(xmin,ymin,zmin,xmax,ymax,zmax,dim=-1):
        """
        Gets the (elementary) geometrical entities in the bounding box defined by
        the two points (xmin, ymin, zmin) and (xmax, ymax, zmax). If `dim' is >= 0,
        returns only the entities of the specified dimension (e.g. points if `dim'
        == 0).

        return tags
        """
        api_tags_, api_tags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshModelGetEntitiesInBoundingBox(
            c_double(xmin),
            c_double(ymin),
            c_double(zmin),
            c_double(xmax),
            c_double(ymax),
            c_double(zmax),
            byref(api_tags_), byref(api_tags_n_),
            c_int(dim),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetEntitiesInBoundingBox returned non-zero error code : ",
                ierr.value)
        return _ovectorpair(api_tags_, api_tags_n_.value)

    @staticmethod
    def getBoundingBox(dim,tag):
        """
        Gets the bounding box (xmin, ymin, zmin), (xmax, ymax, zmax) of the
        geometrical entity of dimension `dim' and tag `tag'.

        return xmin, ymin, zmin, xmax, ymax, zmax
        """
        api_xmin_ = c_double()
        api_ymin_ = c_double()
        api_zmin_ = c_double()
        api_xmax_ = c_double()
        api_ymax_ = c_double()
        api_zmax_ = c_double()
        ierr = c_int()
        lib.gmshModelGetBoundingBox(
            c_int(dim),
            c_int(tag),
            byref(api_xmin_),
            byref(api_ymin_),
            byref(api_zmin_),
            byref(api_xmax_),
            byref(api_ymax_),
            byref(api_zmax_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelGetBoundingBox returned non-zero error code : ",
                ierr.value)
        return (
            api_xmin_.value,
            api_ymin_.value,
            api_zmin_.value,
            api_xmax_.value,
            api_ymax_.value,
            api_zmax_.value)

    @staticmethod
    def addDiscreteEntity(dim,tag=-1,boundary=[]):
        """
        Adds a discrete geometrical entity (defined by a mesh) of dimension `dim'
        in the current model. The function returns the tag of the new discrete
        entity, equal to `tag' if `tag' is positive, or a new tag if `tag' < 0.
        `boundary' specifies the tags of the entities on the boundary of the
        discrete entity, if any. Specyfing `boundary' allows Gmsh to construct the
        topology of the overall model.

        return int
        """
        api_boundary_, api_boundary_n_ = _ivectorint(boundary)
        ierr = c_int()
        api__result__ = lib.gmshModelAddDiscreteEntity(
            c_int(dim),
            c_int(tag),
            api_boundary_, api_boundary_n_,
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelAddDiscreteEntity returned non-zero error code : ",
                ierr.value)
        return api__result__

    @staticmethod
    def removeEntities(dimTags,recursive=False):
        """
        Removes the entities `dimTags' of the current model. If `recursive' is
        true, remove all the entities on their boundaries, down to dimension 0.
        """
        api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
        ierr = c_int()
        lib.gmshModelRemoveEntities(
            api_dimTags_, api_dimTags_n_,
            c_int(bool(recursive)),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshModelRemoveEntities returned non-zero error code : ",
                ierr.value)


    class mesh:
        """
        Per-model meshing functions
        """

        @staticmethod
        def generate(dim):
            """
            Generates a mesh of the current model, up to dimension `dim' (0, 1, 2 or
            3).
            """
            ierr = c_int()
            lib.gmshModelMeshGenerate(
                c_int(dim),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGenerate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def getLastEntityError():
            """
            Gets the last entities (if any) where a meshing error occurred. Currently
            only populated by the new 3D meshing algorithms.

            return dimTags
            """
            api_dimTags_, api_dimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetLastEntityError(
                byref(api_dimTags_), byref(api_dimTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetLastEntityError returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_dimTags_, api_dimTags_n_.value)

        @staticmethod
        def getLastVertexError():
            """
            Gets the last mesh vertices (if any) where a meshing error occurred.
            Currently only populated by the new 3D meshing algorithms.

            return vertexTags
            """
            api_vertexTags_, api_vertexTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetLastVertexError(
                byref(api_vertexTags_),byref(api_vertexTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetLastVertexError returned non-zero error code : ",
                    ierr.value)
            return _ovectorint(api_vertexTags_,api_vertexTags_n_.value)

        @staticmethod
        def getVertices(dim,tag):
            """
            Gets the mesh vertices of the entity of dimension `dim' and `tag' tag.
            `vertextags' contains the vertex tags (their unique, strictly positive
            identification numbers). `coord` is a vector of length `3 *
            vertexTags.size()' that contains the (x, y, z) coordinates of the vertices,
            concatenated. `parametricCoord` contains the parametric coordinates of the
            vertices, if available. The length of `parametricCoord` can be 0 or `dim *
            vertexTags.size()'.

            return vertexTags, coord, parametricCoord
            """
            api_vertexTags_, api_vertexTags_n_ = POINTER(c_int)(), c_size_t()
            api_coord_, api_coord_n_ = POINTER(c_double)(), c_size_t()
            api_parametricCoord_, api_parametricCoord_n_ = POINTER(c_double)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetVertices(
                c_int(dim),
                c_int(tag),
                byref(api_vertexTags_),byref(api_vertexTags_n_),
                byref(api_coord_),byref(api_coord_n_),
                byref(api_parametricCoord_),byref(api_parametricCoord_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetVertices returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorint(api_vertexTags_,api_vertexTags_n_.value),
                _ovectordouble(api_coord_,api_coord_n_.value),
                _ovectordouble(api_parametricCoord_,api_parametricCoord_n_.value))

        @staticmethod
        def getElements(dim,tag):
            """
            Gets the mesh elements of the entity of dimension `dim' and `tag' tag.
            `types' contains the MSH types of the elements (e.g. `2' for 3-node
            triangles: see the Gmsh reference manual). `elementTags' is a vector of
            length `types.size()'; each entry is a vector containing the tags (unique,
            strictly positive identifiers) of the elements of the corresponding type.
            `vertexTags' is also a vector of length `types.size()'; each entry is a
            vector of length equal to the number of elements of the given type times
            the number of vertices for this type of element, that contains the vertex
            tags of all the elements of the given type, concatenated.

            return types, elementTags, vertexTags
            """
            api_types_, api_types_n_ = POINTER(c_int)(), c_size_t()
            api_elementTags_, api_elementTags_n_, api_elementTags_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            api_vertexTags_, api_vertexTags_n_, api_vertexTags_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetElements(
                c_int(dim),
                c_int(tag),
                byref(api_types_),byref(api_types_n_),
                byref(api_elementTags_),byref(api_elementTags_n_),byref(api_elementTags_nn_),
                byref(api_vertexTags_),byref(api_vertexTags_n_),byref(api_vertexTags_nn_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetElements returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorint(api_types_,api_types_n_.value),
                _ovectorvectorint(api_elementTags_,api_elementTags_n_,api_elementTags_nn_),
                _ovectorvectorint(api_vertexTags_,api_vertexTags_n_,api_vertexTags_nn_))

        @staticmethod
        def setVertices(dim,tag,vertexTags,coord,parametricCoord=[]):
            """
            Sets the mesh vertices in the geometrical entity of dimension `dim' and tag
            `tag'. `vertextags' contains the vertex tags (their unique, strictly
            positive identification numbers). `coord` is a vector of length `3 *
            vertexTags.size()' that contains the (x, y, z) coordinates of the vertices,
            concatenated. The optional `parametricCoord` vector contains the parametric
            coordinates of the vertices, if any. The length of `parametricCoord` can be
            0 or `dim * vertexTags.size()'.
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            api_coord_, api_coord_n_ = _ivectordouble(coord)
            api_parametricCoord_, api_parametricCoord_n_ = _ivectordouble(parametricCoord)
            ierr = c_int()
            lib.gmshModelMeshSetVertices(
                c_int(dim),
                c_int(tag),
                api_vertexTags_, api_vertexTags_n_,
                api_coord_, api_coord_n_,
                api_parametricCoord_, api_parametricCoord_n_,
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetVertices returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setElements(dim,tag,types,elementTags,vertexTags):
            """
            Sets the mesh elements of the entity of dimension `dim' and `tag' tag.
            `types' contains the MSH types of the elements (e.g. `2' for 3-node
            triangles: see the Gmsh reference manual). `elementTags' is a vector of
            length `types.size()'; each entry is a vector containing the tags (unique,
            strictly positive identifiers) of the elements of the corresponding type.
            `vertexTags' is also a vector of length `types.size()'; each entry is a
            vector of length equal to the number of elements of the give type times the
            number of vertices per element, that contains the vertex tags of all the
            elements of the given type, concatenated.
            """
            api_types_, api_types_n_ = _ivectorint(types)
            api_elementTags_, api_elementTags_n_, api_elementTags_nn_ = _ivectorvectorint(elementTags)
            api_vertexTags_, api_vertexTags_n_, api_vertexTags_nn_ = _ivectorvectorint(vertexTags)
            ierr = c_int()
            lib.gmshModelMeshSetElements(
                c_int(dim),
                c_int(tag),
                api_types_, api_types_n_,
                api_elementTags_, api_elementTags_n_, api_elementTags_nn_,
                api_vertexTags_, api_vertexTags_n_, api_vertexTags_nn_,
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetElements returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def getVertex(vertexTag):
            """
            Gets the coordinates and the parametric coordinates (if any) of the mesh
            vertex with tag `tag'. This is a useful by inefficient way of accessing
            mesh vertex data, as it relies on a cache stored in the model. For large
            meshes all the vertices in the model should be numbered in a continuous
            sequence of tags from 1 to N to maintain reasonnable performance (in this
            case the internal cache is based on a vector; otherwise it uses a map).

            return coord, parametricCoord
            """
            api_coord_, api_coord_n_ = POINTER(c_double)(), c_size_t()
            api_parametricCoord_, api_parametricCoord_n_ = POINTER(c_double)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetVertex(
                c_int(vertexTag),
                byref(api_coord_),byref(api_coord_n_),
                byref(api_parametricCoord_),byref(api_parametricCoord_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetVertex returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectordouble(api_coord_,api_coord_n_.value),
                _ovectordouble(api_parametricCoord_,api_parametricCoord_n_.value))

        @staticmethod
        def getElement(elementTag):
            """
            Gets the type and vertex tags of the mesh element with tag `tag'. This is a
            useful but inefficient way of accessing mesh element data, as it relies on
            a cache stored in the model. For large meshes all the elements in the model
            should be numbered in a continuous sequence of tags from 1 to N to maintain
            reasonnable performance (in this case the internal cache is based on a
            vector; otherwise it uses a map).

            return type, vertexTags
            """
            api_vertexTags_, api_vertexTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelMeshGetElement(
                c_int(elementTag),
                not_implemented,
                byref(api_vertexTags_),byref(api_vertexTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshGetElement returned non-zero error code : ",
                    ierr.value)
            return (
                not_implemented,
                _ovectorint(api_vertexTags_,api_vertexTags_n_.value))

        @staticmethod
        def setSize(dimTags,size):
            """
            Sets a mesh size constraint on the geometrical entities `dimTags'.
            Currently only entities of dimension 0 (points) are handled.
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelMeshSetSize(
                api_dimTags_, api_dimTags_n_,
                c_double(size),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetSize returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setTransfiniteLine(tag,numVertices,type="Progression",coef=1.):
            """
            Sets a transfinite meshing constraint on the line `tag', with `numVertices'
            mesh vertices distributed according to `type' and `coef'. Currently
            supported types are "Progression" (geometrical progression with power
            `coef') and "Bump" (refinement toward both extreminties of the line).
            """
            ierr = c_int()
            lib.gmshModelMeshSetTransfiniteLine(
                c_int(tag),
                c_int(numVertices),
                c_char_p(type.encode()),
                c_double(coef),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetTransfiniteLine returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setTransfiniteSurface(tag,arrangement="Left",cornerTags=[]):
            """
            Sets a transfinite meshing constraint on the surface `tag'. `arrangement'
            describes the arrangement of the triangles when the surface is not flagged
            as recombined: currently supported values are "Left", "Right",
            "AlternateLeft" and "AlternateRight". `cornerTags' can be used to specify
            the (3 or 4) corners of the transfinite interpolation explicitly;
            specifying the corners explicitly is mandatory if the surface has more that
            3 or 4 points on its boundary.
            """
            api_cornerTags_, api_cornerTags_n_ = _ivectorint(cornerTags)
            ierr = c_int()
            lib.gmshModelMeshSetTransfiniteSurface(
                c_int(tag),
                c_char_p(arrangement.encode()),
                api_cornerTags_, api_cornerTags_n_,
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetTransfiniteSurface returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setTransfiniteVolume(tag,cornerTags=[]):
            """
            Sets a transfinite meshing constraint on the surface `tag'. `cornerTags'
            can be used to specify the (6 or 8) corners of the transfinite
            interpolation explicitly.
            """
            api_cornerTags_, api_cornerTags_n_ = _ivectorint(cornerTags)
            ierr = c_int()
            lib.gmshModelMeshSetTransfiniteVolume(
                c_int(tag),
                api_cornerTags_, api_cornerTags_n_,
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetTransfiniteVolume returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setRecombine(dim,tag):
            """
            Sets a recombination meshing constraint on the geometrical entity of
            dimension `dim' and tag `tag'. Currently only entities of dimension 2 (to
            recombine triangles into quadrangles) are supported.
            """
            ierr = c_int()
            lib.gmshModelMeshSetRecombine(
                c_int(dim),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetRecombine returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setSmoothing(dim,tag,val):
            """
            Sets a smoothing meshing constraint on the geometrical entity of dimension
            `dim' and tag `tag'. `val' iterations of a Laplace smoother are applied.
            """
            ierr = c_int()
            lib.gmshModelMeshSetSmoothing(
                c_int(dim),
                c_int(tag),
                c_int(val),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetSmoothing returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def setReverse(dim,tag,val=True):
            """
            Sets a reverse meshing constraint on the geometrical entity of dimension
            `dim' and tag `tag'. If `val' is true, the mesh orientation will be
            reversed with respect to the natural mesh orientation (i.e. the orientation
            consistent with the orientation of the geometrical entity). If `val' is
            false, the mesh is left as-is.
            """
            ierr = c_int()
            lib.gmshModelMeshSetReverse(
                c_int(dim),
                c_int(tag),
                c_int(bool(val)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshSetReverse returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def embed(dim,tags,inDim,inTag):
            """
            Emebds the geometrical entities of dimension `dim' and tags `tags' in the
            (inDim, inTag) geometrical entity. `inDim' must be strictly greater than
            `dim'.
            """
            api_tags_, api_tags_n_ = _ivectorint(tags)
            ierr = c_int()
            lib.gmshModelMeshEmbed(
                c_int(dim),
                api_tags_, api_tags_n_,
                c_int(inDim),
                c_int(inTag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelMeshEmbed returned non-zero error code : ",
                    ierr.value)


        class field:
            """
            Per-model mesh size field functions
            """

            @staticmethod
            def add(type,tag=-1):
                """
                Adds a new mesh size field of type `type'. If `tag' is positive, assign the
                tag explcitly; otherwise a new tag is assigned automatically. Returns the
                field tag.

                return int
                """
                ierr = c_int()
                api__result__ = lib.gmshModelMeshFieldAdd(
                    c_char_p(type.encode()),
                    c_int(tag),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldAdd returned non-zero error code : ",
                        ierr.value)
                return api__result__

            @staticmethod
            def remove(tag):
                """
                Removes the field with tag `tag'.
                """
                ierr = c_int()
                lib.gmshModelMeshFieldRemove(
                    c_int(tag),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldRemove returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setNumber(tag,option,value):
                """
                Sets the numerical option `option' to value `value' for field `tag'.
                """
                ierr = c_int()
                lib.gmshModelMeshFieldSetNumber(
                    c_int(tag),
                    c_char_p(option.encode()),
                    c_double(value),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldSetNumber returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setString(tag,option,value):
                """
                Sets the string option `option' to value `value' for field `tag'.
                """
                ierr = c_int()
                lib.gmshModelMeshFieldSetString(
                    c_int(tag),
                    c_char_p(option.encode()),
                    c_char_p(value.encode()),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldSetString returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setNumbers(tag,option,value):
                """
                Sets the numerical list option `option' to value `value' for field `tag'.
                """
                api_value_, api_value_n_ = _ivectordouble(value)
                ierr = c_int()
                lib.gmshModelMeshFieldSetNumbers(
                    c_int(tag),
                    c_char_p(option.encode()),
                    api_value_, api_value_n_,
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldSetNumbers returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setAsBackground(tag):
                """
                Sets the field `tag' as background mesh size field.
                """
                ierr = c_int()
                lib.gmshModelMeshFieldSetAsBackground(
                    c_int(tag),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelMeshFieldSetAsBackground returned non-zero error code : ",
                        ierr.value)


    class geo:
        """
        Internal per-model GEO CAD kernel functions
        """

        @staticmethod
        def addPoint(x,y,z,meshSize=0.,tag=-1):
            """
            Adds a geometrical point in the internal GEO CAD representation, at
            coordinates (x, y, z). If `meshSize' is > 0, adds a meshing constraint at
            that point. If `tag' is positive, sets the tag explicitly; otherwise a new
            tag is selected automatically. Returns the tag of the point. (Note that the
            point will be added in the current model only after
            gmshModelGeoSynchronize() is called. This behavior holds for all the
            entities added in the gmshModelGeo module.)

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddPoint(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(meshSize),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddPoint returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addLine(startTag,endTag,tag=-1):
            """
            Adds a straight line segment between the two points with tags `startTag'
            and `endTag'. If `tag' is positive, sets the tag explicitly; otherwise a
            new tag is selected automatically. Returns the tag of the line.

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddLine(
                c_int(startTag),
                c_int(endTag),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddLine returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addCircleArc(startTag,centerTag,endTag,tag=-1,nx=0.,ny=0.,nz=0.):
            """
            Adds a circle arc (stricly smaller than Pi) between the two points with
            tags `startTag' and `endTag', with center `centertag'. If `tag' is
            positive, sets the tag explicitly; otherwise a new tag is selected
            automatically. If (`nx', `ny', `nz') != (0,0,0), explicitely sets the plane
            of the circle arc. Returns the tag of the circle arc.

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddCircleArc(
                c_int(startTag),
                c_int(centerTag),
                c_int(endTag),
                c_int(tag),
                c_double(nx),
                c_double(ny),
                c_double(nz),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddCircleArc returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addEllipseArc(startTag,centerTag,majorTag,endTag,tag=-1,nx=0.,ny=0.,nz=0.):
            """
            Adds an ellipse arc (stricly smaller than Pi) between the two points
            `startTag' and `endTag', with center `centertag' and major axis point
            `majorTag'. If `tag' is positive, sets the tag explicitly; otherwise a new
            tag is selected automatically. If (`nx', `ny', `nz') != (0,0,0),
            explicitely sets the plane of the circle arc. Returns the tag of the
            ellipse arc.

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddEllipseArc(
                c_int(startTag),
                c_int(centerTag),
                c_int(majorTag),
                c_int(endTag),
                c_int(tag),
                c_double(nx),
                c_double(ny),
                c_double(nz),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddEllipseArc returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSpline(vertexTags,tag=-1):
            """
            Adds a spline curve going through `vertexTags' points. If `tag' is
            positive, sets the tag explicitly; otherwise a new tag is selected
            automatically.  Returns the tag of the spline curve.

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddSpline(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddSpline returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addBSpline(vertexTags,tag=-1):
            """
            Adds a b-spline curve with `vertexTags' control points. If `tag' is
            positive, sets the tag explicitly; otherwise a new tag is selected
            automatically.  Returns the tag of the b-spline curve.

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddBSpline(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddBSpline returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addBezier(vertexTags,tag=-1):
            """
            Adds a Bezier curve with `vertexTags' control points. If `tag' is positive,
            sets the tag explicitly; otherwise a new tag is selected automatically.
            Returns the tag of the Bezier curve.

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddBezier(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddBezier returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addLineLoop(edgeTags,tag=-1):
            """
            Adds a line loop (a closed wire) formed by `edgeTags'. `edgeTags' should
            contain (signed) tags of geometrical enties of dimension 1 forming a closed
            loop: a negative tag signifies that the underlying edge is considered with
            reversed orientation. If `tag' is positive, sets the tag explicitly;
            otherwise a new tag is selected automatically. Returns the tag of the line
            loop.

            return int
            """
            api_edgeTags_, api_edgeTags_n_ = _ivectorint(edgeTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddLineLoop(
                api_edgeTags_, api_edgeTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddLineLoop returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addPlaneSurface(wireTags,tag=-1):
            """
            Adds a plane surface defined by one or more line loops `wireTags'. The
            first line loop defines the exterior contour; additional line loop define
            holes. If `tag' is positive, sets the tag explicitly; otherwise a new tag
            is selected automatically. Returns the tag of the surface.

            return int
            """
            api_wireTags_, api_wireTags_n_ = _ivectorint(wireTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddPlaneSurface(
                api_wireTags_, api_wireTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddPlaneSurface returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSurfaceFilling(wireTags,tag=-1,sphereCenterTag=-1):
            """
            Adds a surface filling the line loops in `wireTags'. Currently only a
            single line loop is supported; this line loop should be composed by 3 or 4
            edges only. If `tag' is positive, sets the tag explicitly; otherwise a new
            tag is selected automatically. Returns the tag of the surface.

            return int
            """
            api_wireTags_, api_wireTags_n_ = _ivectorint(wireTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddSurfaceFilling(
                api_wireTags_, api_wireTags_n_,
                c_int(tag),
                c_int(sphereCenterTag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddSurfaceFilling returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSurfaceLoop(faceTags,tag=-1):
            """
            Adds a surface loop (a closed shell) formed by `faceTags'.  If `tag' is
            positive, sets the tag explicitly; otherwise a new tag is selected
            automatically. Returns the tag of the surface loop.

            return int
            """
            api_faceTags_, api_faceTags_n_ = _ivectorint(faceTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddSurfaceLoop(
                api_faceTags_, api_faceTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddSurfaceLoop returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addVolume(shellTags,tag=-1):
            """
            Adds a volume defined by one or more surface loops `shellTags'. The first
            surface loop defines the exterior boundary; additional surface loop define
            holes. If `tag' is positive, sets the tag explicitly; otherwise a new tag
            is selected automatically. Returns the tag of the volume.

            return int
            """
            api_shellTags_, api_shellTags_n_ = _ivectorint(shellTags)
            ierr = c_int()
            api__result__ = lib.gmshModelGeoAddVolume(
                api_shellTags_, api_shellTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoAddVolume returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def extrude(dimTags,dx,dy,dz,numElements=[],heights=[],recombine=False):
            """
            Extrudes the geometrical entities in `dimTags' by translation along (`dx',
            `dy', `dz'). Returns extruded entities in `outDimTags'. If `numElements' is
            not empty, also extrude the mesh: the entries in `numElements' give the
            number of elements in each layer. If `height' is not empty, it provides the
            (cummulative) height of the different layers, normalized to 1.

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_numElements_, api_numElements_n_ = _ivectorint(numElements)
            api_heights_, api_heights_n_ = _ivectordouble(heights)
            ierr = c_int()
            lib.gmshModelGeoExtrude(
                api_dimTags_, api_dimTags_n_,
                c_double(dx),
                c_double(dy),
                c_double(dz),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                api_numElements_, api_numElements_n_,
                api_heights_, api_heights_n_,
                c_int(bool(recombine)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoExtrude returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def revolve(dimTags,x,y,z,ax,ay,az,angle,numElements=[],heights=[],recombine=False):
            """
            Extrudes the geometrical entities in `dimTags' by rotation of `angle'
            radians around the axis of revolution defined by the point (`x', `y', `z')
            and the direction (`ax', `ay', `az'). Returns extruded entities in
            `outDimTags'. If `numElements' is not empty, also extrude the mesh: the
            entries in `numElements' give the number of elements in each layer. If
            `height' is not empty, it provides the (cummulative) height of the
            different layers, normalized to 1.

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_numElements_, api_numElements_n_ = _ivectorint(numElements)
            api_heights_, api_heights_n_ = _ivectordouble(heights)
            ierr = c_int()
            lib.gmshModelGeoRevolve(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(ax),
                c_double(ay),
                c_double(az),
                c_double(angle),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                api_numElements_, api_numElements_n_,
                api_heights_, api_heights_n_,
                c_int(bool(recombine)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoRevolve returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def twist(dimTags,x,y,z,dx,dy,dz,ax,ay,az,angle,numElements=[],heights=[],recombine=False):
            """
            Extrudes the geometrical entities in `dimTags' by a combined translation
            and rotation of `angle' radians, along (`dx', `dy', `dz') and around the
            axis of revolution defined by the point (`x', `y', `z') and the direction
            (`ax', `ay', `az'). Returns extruded entities in `outDimTags'. If
            `numElements' is not empty, also extrude the mesh: the entries in
            `numElements' give the number of elements in each layer. If `height' is not
            empty, it provides the (cummulative) height of the different layers,
            normalized to 1.

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_numElements_, api_numElements_n_ = _ivectorint(numElements)
            api_heights_, api_heights_n_ = _ivectordouble(heights)
            ierr = c_int()
            lib.gmshModelGeoTwist(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_double(dz),
                c_double(ax),
                c_double(ay),
                c_double(az),
                c_double(angle),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                api_numElements_, api_numElements_n_,
                api_heights_, api_heights_n_,
                c_int(bool(recombine)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoTwist returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def translate(dimTags,dx,dy,dz):
            """
            Translates the geometrical entities in `dimTags' along (`dx', `dy', `dz').
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelGeoTranslate(
                api_dimTags_, api_dimTags_n_,
                c_double(dx),
                c_double(dy),
                c_double(dz),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoTranslate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def rotate(dimTags,x,y,z,ax,ay,az,angle):
            """
            Rotates the geometrical entities in `dimTags' of `angle' radians around the
            axis of revolution defined by the point (`x', `y', `z') and the direction
            (`ax', `ay', `az').
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelGeoRotate(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(ax),
                c_double(ay),
                c_double(az),
                c_double(angle),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoRotate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def dilate(dimTags,x,y,z,a,b,c):
            """
            Scales the geometrical entities in `dimTag' by factors `a', `b' and `c'
            along the three coordinate axes; use (`x', `y', `z') as the center of the
            homothetic transformation.
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelGeoDilate(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(a),
                c_double(b),
                c_double(c),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoDilate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def symmetry(dimTags,a,b,c,d):
            """
            Applies a symmetry transformation to the geometrical entities in `dimTag',
            with respect to the plane of equation `a' * x + `b' * y + `c' * z + `d' =
            0.
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelGeoSymmetry(
                api_dimTags_, api_dimTags_n_,
                c_double(a),
                c_double(b),
                c_double(c),
                c_double(d),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoSymmetry returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def copy(dimTags):
            """
            Copies the entities in `dimTags'; the new entities are returned in
            `outDimTags'.

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelGeoCopy(
                api_dimTags_, api_dimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoCopy returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def remove(dimTags,recursive=False):
            """
            Removes the entities `dimTags'. If `recursive' is true, remove all the
            entities on their boundaries, down to dimension 0.
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelGeoRemove(
                api_dimTags_, api_dimTags_n_,
                c_int(bool(recursive)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoRemove returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def removeAllDuplicates():
            """
            Remove all duplicate entities (different entities at the same geometrical
            location).
            """
            ierr = c_int()
            lib.gmshModelGeoRemoveAllDuplicates(
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoRemoveAllDuplicates returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def synchronize():
            """
            Synchronize the internal GEO CAD representation with the current Gmsh
            model. This can be called at any time, but since it involves a non trivial
            amount of processing, the number of synchronization points should normally
            be minimized.
            """
            ierr = c_int()
            lib.gmshModelGeoSynchronize(
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelGeoSynchronize returned non-zero error code : ",
                    ierr.value)


        class mesh:
            """
            geo-specific meshing constraints
            """

            @staticmethod
            def setSize(dimTags,size):
                """
                Sets a mesh size constraint on the geometrical entities `dimTags'.
                Currently only entities of dimension 0 (points) are handled.
                """
                api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
                ierr = c_int()
                lib.gmshModelGeoMeshSetSize(
                    api_dimTags_, api_dimTags_n_,
                    c_double(size),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetSize returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setTransfiniteLine(tag,nPoints,type="Progression",coef=1.):
                """
                Sets a transfinite meshing constraint on the line `tag', with `numVertices'
                mesh vertices distributed according to `type' and `coef'. Currently
                supported types are "Progression" (geometrical progression with power
                `coef') and "Bump" (refinement toward both extreminties of the line).
                """
                ierr = c_int()
                lib.gmshModelGeoMeshSetTransfiniteLine(
                    c_int(tag),
                    c_int(nPoints),
                    c_char_p(type.encode()),
                    c_double(coef),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetTransfiniteLine returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setTransfiniteSurface(tag,arrangement="Left",cornerTags=[]):
                """
                Sets a transfinite meshing constraint on the surface `tag'. `arrangement'
                describes the arrangement of the triangles when the surface is not flagged
                as recombined: currently supported values are "Left", "Right",
                "AlternateLeft" and "AlternateRight". `cornerTags' can be used to specify
                the (3 or 4) corners of the transfinite interpolation explicitly;
                specifying the corners explicitly is mandatory if the surface has more that
                3 or 4 points on its boundary.
                """
                api_cornerTags_, api_cornerTags_n_ = _ivectorint(cornerTags)
                ierr = c_int()
                lib.gmshModelGeoMeshSetTransfiniteSurface(
                    c_int(tag),
                    c_char_p(arrangement.encode()),
                    api_cornerTags_, api_cornerTags_n_,
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetTransfiniteSurface returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setTransfiniteVolume(tag,cornerTags=[]):
                """
                Sets a transfinite meshing constraint on the surface `tag'. `cornerTags'
                can be used to specify the (6 or 8) corners of the transfinite
                interpolation explicitly.
                """
                api_cornerTags_, api_cornerTags_n_ = _ivectorint(cornerTags)
                ierr = c_int()
                lib.gmshModelGeoMeshSetTransfiniteVolume(
                    c_int(tag),
                    api_cornerTags_, api_cornerTags_n_,
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetTransfiniteVolume returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setRecombine(dim,tag,angle=45.):
                """
                Sets a recombination meshing constraint on the geometrical entity of
                dimension `dim' and tag `tag'. Currently only entities of dimension 2 (to
                recombine triangles into quadrangles) are supported.
                """
                ierr = c_int()
                lib.gmshModelGeoMeshSetRecombine(
                    c_int(dim),
                    c_int(tag),
                    c_double(angle),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetRecombine returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setSmoothing(dim,tag,val):
                """
                Sets a smoothing meshing constraint on the geometrical entity of dimension
                `dim' and tag `tag'. `val' iterations of a Laplace smoother are applied.
                """
                ierr = c_int()
                lib.gmshModelGeoMeshSetSmoothing(
                    c_int(dim),
                    c_int(tag),
                    c_int(val),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetSmoothing returned non-zero error code : ",
                        ierr.value)

            @staticmethod
            def setReverse(dim,tag,val=True):
                """
                Sets a reverse meshing constraint on the geometrical entity of dimension
                `dim' and tag `tag'. If `val' is true, the mesh orientation will be
                reversed with respect to the natural mesh orientation (i.e. the orientation
                consistent with the orientation of the geometrical entity). If `val' is
                false, the mesh is left as-is.
                """
                ierr = c_int()
                lib.gmshModelGeoMeshSetReverse(
                    c_int(dim),
                    c_int(tag),
                    c_int(bool(val)),
                    byref(ierr))
                if ierr.value != 0 :
                    raise ValueError(
                        "gmshModelGeoMeshSetReverse returned non-zero error code : ",
                        ierr.value)


    class occ:
        """
        Internal per-model OpenCASCADE CAD kernel functions
        """

        @staticmethod
        def addPoint(x,y,z,meshSize=0.,tag=-1):
            """
            Adds a geometrical point in the internal OpenCASCADE CAD representation, at
            coordinates (x, y, z). If `meshSize' is > 0, adds a meshing constraint at
            that point. If `tag' is positive, sets the tag explicitly; otherwise a new
            tag is selected automatically. Returns the tag of the point. (Note that the
            point will be added in the current model only after
            gmshModelGeoSynchronize() is called. This behavior holds for all the
            entities added in the gmshModelOcc module.)

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddPoint(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(meshSize),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddPoint returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addLine(startTag,endTag,tag=-1):
            """
            Adds a straight line segment between the two points with tags `startTag'
            and `endTag'. If `tag' is positive, sets the tag explicitly; otherwise a
            new tag is selected automatically. Returns the tag of the line.

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddLine(
                c_int(startTag),
                c_int(endTag),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddLine returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addCircleArc(startTag,centerTag,endTag,tag=-1):
            """
            Adds a circle arc between the two points with tags `startTag' and `endTag',
            with center `centertag'. If `tag' is positive, sets the tag explicitly;
            otherwise a new tag is selected automatically. Returns the tag of the
            circle arc.

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddCircleArc(
                c_int(startTag),
                c_int(centerTag),
                c_int(endTag),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddCircleArc returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addCircle(x,y,z,r,tag=-1,angle1=0.,angle2=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddCircle(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(r),
                c_int(tag),
                c_double(angle1),
                c_double(angle2),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddCircle returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addEllipseArc(startTag,centerTag,endTag,tag=-1):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddEllipseArc(
                c_int(startTag),
                c_int(centerTag),
                c_int(endTag),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddEllipseArc returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addEllipse(x,y,z,r1,r2,tag=-1,angle1=0.,angle2=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddEllipse(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(r1),
                c_double(r2),
                c_int(tag),
                c_double(angle1),
                c_double(angle2),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddEllipse returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSpline(vertexTags,tag=-1):
            """
            TODO

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddSpline(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddSpline returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addBezier(vertexTags,tag=-1):
            """
            TODO

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddBezier(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddBezier returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addBSpline(vertexTags,tag=-1):
            """
            TODO

            return int
            """
            api_vertexTags_, api_vertexTags_n_ = _ivectorint(vertexTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddBSpline(
                api_vertexTags_, api_vertexTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddBSpline returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addWire(edgeTags,tag=-1,checkClosed=False):
            """
            TODO

            return int
            """
            api_edgeTags_, api_edgeTags_n_ = _ivectorint(edgeTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddWire(
                api_edgeTags_, api_edgeTags_n_,
                c_int(tag),
                c_int(bool(checkClosed)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddWire returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addLineLoop(edgeTags,tag=-1):
            """
            TODO

            return int
            """
            api_edgeTags_, api_edgeTags_n_ = _ivectorint(edgeTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddLineLoop(
                api_edgeTags_, api_edgeTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddLineLoop returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addRectangle(x,y,z,dx,dy,tag=-1,roundedRadius=0.):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddRectangle(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_int(tag),
                c_double(roundedRadius),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddRectangle returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addDisk(xc,yc,zc,rx,ry,tag=-1):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddDisk(
                c_double(xc),
                c_double(yc),
                c_double(zc),
                c_double(rx),
                c_double(ry),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddDisk returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addPlaneSurface(wireTags,tag=-1):
            """
            TODO

            return int
            """
            api_wireTags_, api_wireTags_n_ = _ivectorint(wireTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddPlaneSurface(
                api_wireTags_, api_wireTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddPlaneSurface returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSurfaceFilling(wireTag,tag=-1):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddSurfaceFilling(
                c_int(wireTag),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddSurfaceFilling returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSurfaceLoop(faceTags,tag=-1):
            """
            TODO

            return int
            """
            api_faceTags_, api_faceTags_n_ = _ivectorint(faceTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddSurfaceLoop(
                api_faceTags_, api_faceTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddSurfaceLoop returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addVolume(shellTags,tag=-1):
            """
            TODO

            return int
            """
            api_shellTags_, api_shellTags_n_ = _ivectorint(shellTags)
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddVolume(
                api_shellTags_, api_shellTags_n_,
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddVolume returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addSphere(xc,yc,zc,radius,tag=-1,angle1=-pi/2,angle2=pi/2,angle3=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddSphere(
                c_double(xc),
                c_double(yc),
                c_double(zc),
                c_double(radius),
                c_int(tag),
                c_double(angle1),
                c_double(angle2),
                c_double(angle3),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddSphere returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addBox(x,y,z,dx,dy,dz,tag=-1):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddBox(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_double(dz),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddBox returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addCylinder(x,y,z,dx,dy,dz,r,tag=-1,angle=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddCylinder(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_double(dz),
                c_double(r),
                c_int(tag),
                c_double(angle),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddCylinder returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addCone(x,y,z,dx,dy,dz,r1,r2,tag=-1,angle=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddCone(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_double(dz),
                c_double(r1),
                c_double(r2),
                c_int(tag),
                c_double(angle),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddCone returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addWedge(x,y,z,dx,dy,dz,tag=-1,ltx=0.):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddWedge(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(dx),
                c_double(dy),
                c_double(dz),
                c_int(tag),
                c_double(ltx),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddWedge returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addTorus(x,y,z,r1,r2,tag=-1,angle=2*pi):
            """
            TODO

            return int
            """
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddTorus(
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(r1),
                c_double(r2),
                c_int(tag),
                c_double(angle),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddTorus returned non-zero error code : ",
                    ierr.value)
            return api__result__

        @staticmethod
        def addThruSections(wireTags,tag=-1,makeSolid=True,makeRuled=False):
            """
            TODO

            return int, outDimTags
            """
            api_wireTags_, api_wireTags_n_ = _ivectorint(wireTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddThruSections(
                api_wireTags_, api_wireTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                c_int(tag),
                c_int(bool(makeSolid)),
                c_int(bool(makeRuled)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddThruSections returned non-zero error code : ",
                    ierr.value)
            return (
                api__result__,
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value))

        @staticmethod
        def addThickSolid(solidTag,excludeFaceTags,offset,tag=-1):
            """
            TODO

            return int, outDimTags
            """
            api_excludeFaceTags_, api_excludeFaceTags_n_ = _ivectorint(excludeFaceTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            api__result__ = lib.gmshModelOccAddThickSolid(
                c_int(solidTag),
                api_excludeFaceTags_, api_excludeFaceTags_n_,
                c_double(offset),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                c_int(tag),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddThickSolid returned non-zero error code : ",
                    ierr.value)
            return (
                api__result__,
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value))

        @staticmethod
        def extrude(dimTags,dx,dy,dz,numElements=[],heights=[],recombine=False):
            """
            TODO

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_numElements_, api_numElements_n_ = _ivectorint(numElements)
            api_heights_, api_heights_n_ = _ivectordouble(heights)
            ierr = c_int()
            lib.gmshModelOccExtrude(
                api_dimTags_, api_dimTags_n_,
                c_double(dx),
                c_double(dy),
                c_double(dz),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                api_numElements_, api_numElements_n_,
                api_heights_, api_heights_n_,
                c_int(bool(recombine)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccExtrude returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def revolve(dimTags,x,y,z,ax,ay,az,angle,numElements=[],heights=[],recombine=False):
            """
            TODO

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_numElements_, api_numElements_n_ = _ivectorint(numElements)
            api_heights_, api_heights_n_ = _ivectordouble(heights)
            ierr = c_int()
            lib.gmshModelOccRevolve(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(ax),
                c_double(ay),
                c_double(az),
                c_double(angle),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                api_numElements_, api_numElements_n_,
                api_heights_, api_heights_n_,
                c_int(bool(recombine)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccRevolve returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def addPipe(dimTags,wireTag):
            """
            TODO

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccAddPipe(
                api_dimTags_, api_dimTags_n_,
                c_int(wireTag),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccAddPipe returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def fillet(regionTags,edgeTags,radius,removeRegion=True):
            """
            TODO

            return outDimTags
            """
            api_regionTags_, api_regionTags_n_ = _ivectorint(regionTags)
            api_edgeTags_, api_edgeTags_n_ = _ivectorint(edgeTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccFillet(
                api_regionTags_, api_regionTags_n_,
                api_edgeTags_, api_edgeTags_n_,
                c_double(radius),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                c_int(bool(removeRegion)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccFillet returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def booleanUnion(objectDimTags,toolDimTags,tag=-1,removeObject=True,removeTool=True):
            """
            TODO

            return outDimTags, outDimTagsMap
            """
            api_objectDimTags_, api_objectDimTags_n_ = _ivectorpair(objectDimTags)
            api_toolDimTags_, api_toolDimTags_n_ = _ivectorpair(toolDimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_outDimTagsMap_, api_outDimTagsMap_n_, api_outDimTagsMap_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccBooleanUnion(
                api_objectDimTags_, api_objectDimTags_n_,
                api_toolDimTags_, api_toolDimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(api_outDimTagsMap_),byref(api_outDimTagsMap_n_),byref(api_outDimTagsMap_nn_),
                c_int(tag),
                c_int(bool(removeObject)),
                c_int(bool(removeTool)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccBooleanUnion returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value),
                _ovectorvectorpair(api_outDimTagsMap_,api_outDimTagsMap_n_,api_outDimTagsMap_nn_))

        @staticmethod
        def booleanIntersection(objectDimTags,toolDimTags,tag=-1,removeObject=True,removeTool=True):
            """
            TODO

            return outDimTags, outDimTagsMap
            """
            api_objectDimTags_, api_objectDimTags_n_ = _ivectorpair(objectDimTags)
            api_toolDimTags_, api_toolDimTags_n_ = _ivectorpair(toolDimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_outDimTagsMap_, api_outDimTagsMap_n_, api_outDimTagsMap_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccBooleanIntersection(
                api_objectDimTags_, api_objectDimTags_n_,
                api_toolDimTags_, api_toolDimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(api_outDimTagsMap_),byref(api_outDimTagsMap_n_),byref(api_outDimTagsMap_nn_),
                c_int(tag),
                c_int(bool(removeObject)),
                c_int(bool(removeTool)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccBooleanIntersection returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value),
                _ovectorvectorpair(api_outDimTagsMap_,api_outDimTagsMap_n_,api_outDimTagsMap_nn_))

        @staticmethod
        def booleanDifference(objectDimTags,toolDimTags,tag=-1,removeObject=True,removeTool=True):
            """
            TODO

            return outDimTags, outDimTagsMap
            """
            api_objectDimTags_, api_objectDimTags_n_ = _ivectorpair(objectDimTags)
            api_toolDimTags_, api_toolDimTags_n_ = _ivectorpair(toolDimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_outDimTagsMap_, api_outDimTagsMap_n_, api_outDimTagsMap_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccBooleanDifference(
                api_objectDimTags_, api_objectDimTags_n_,
                api_toolDimTags_, api_toolDimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(api_outDimTagsMap_),byref(api_outDimTagsMap_n_),byref(api_outDimTagsMap_nn_),
                c_int(tag),
                c_int(bool(removeObject)),
                c_int(bool(removeTool)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccBooleanDifference returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value),
                _ovectorvectorpair(api_outDimTagsMap_,api_outDimTagsMap_n_,api_outDimTagsMap_nn_))

        @staticmethod
        def booleanFragments(objectDimTags,toolDimTags,tag=-1,removeObject=True,removeTool=True):
            """
            TODO

            return outDimTags, outDimTagsMap
            """
            api_objectDimTags_, api_objectDimTags_n_ = _ivectorpair(objectDimTags)
            api_toolDimTags_, api_toolDimTags_n_ = _ivectorpair(toolDimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            api_outDimTagsMap_, api_outDimTagsMap_n_, api_outDimTagsMap_nn_ = POINTER(POINTER(c_int))(), POINTER(c_size_t)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccBooleanFragments(
                api_objectDimTags_, api_objectDimTags_n_,
                api_toolDimTags_, api_toolDimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(api_outDimTagsMap_),byref(api_outDimTagsMap_n_),byref(api_outDimTagsMap_nn_),
                c_int(tag),
                c_int(bool(removeObject)),
                c_int(bool(removeTool)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccBooleanFragments returned non-zero error code : ",
                    ierr.value)
            return (
                _ovectorpair(api_outDimTags_, api_outDimTags_n_.value),
                _ovectorvectorpair(api_outDimTagsMap_,api_outDimTagsMap_n_,api_outDimTagsMap_nn_))

        @staticmethod
        def translate(dimTags,dx,dy,dz):
            """
            TODO
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccTranslate(
                api_dimTags_, api_dimTags_n_,
                c_double(dx),
                c_double(dy),
                c_double(dz),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccTranslate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def rotate(dimTags,x,y,z,ax,ay,az,angle):
            """
            TODO
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccRotate(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(ax),
                c_double(ay),
                c_double(az),
                c_double(angle),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccRotate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def dilate(dimTags,x,y,z,a,b,c):
            """
            TODO
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccDilate(
                api_dimTags_, api_dimTags_n_,
                c_double(x),
                c_double(y),
                c_double(z),
                c_double(a),
                c_double(b),
                c_double(c),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccDilate returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def symmetry(dimTags,a,b,c,d):
            """
            TODO
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccSymmetry(
                api_dimTags_, api_dimTags_n_,
                c_double(a),
                c_double(b),
                c_double(c),
                c_double(d),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccSymmetry returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def copy(dimTags):
            """
            TODO

            return outDimTags
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccCopy(
                api_dimTags_, api_dimTags_n_,
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccCopy returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def remove(dimTags,recursive=False):
            """
            TODO
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccRemove(
                api_dimTags_, api_dimTags_n_,
                c_int(bool(recursive)),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccRemove returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def removeAllDuplicates():
            """
            TODO
            """
            ierr = c_int()
            lib.gmshModelOccRemoveAllDuplicates(
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccRemoveAllDuplicates returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def importShapes(fileName,highestDimOnly=True,format=""):
            """
            TODO

            return outDimTags
            """
            api_outDimTags_, api_outDimTags_n_ = POINTER(c_int)(), c_size_t()
            ierr = c_int()
            lib.gmshModelOccImportShapes(
                c_char_p(fileName.encode()),
                byref(api_outDimTags_), byref(api_outDimTags_n_),
                c_int(bool(highestDimOnly)),
                c_char_p(format.encode()),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccImportShapes returned non-zero error code : ",
                    ierr.value)
            return _ovectorpair(api_outDimTags_, api_outDimTags_n_.value)

        @staticmethod
        def setMeshSize(dimTags,size):
            """
            Sets a mesh size constraint on the geometrical entities `dimTags'.
            Currently only entities of dimension 0 (points) are handled.
            """
            api_dimTags_, api_dimTags_n_ = _ivectorpair(dimTags)
            ierr = c_int()
            lib.gmshModelOccSetMeshSize(
                api_dimTags_, api_dimTags_n_,
                c_double(size),
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccSetMeshSize returned non-zero error code : ",
                    ierr.value)

        @staticmethod
        def synchronize():
            """
            Synchronize the internal OpenCASCADE CAD representation with the current
            Gmsh model. This can be called at any time, but since it involves a non
            trivial amount of processing, the number of synchronization points should
            normally be minimized.
            """
            ierr = c_int()
            lib.gmshModelOccSynchronize(
                byref(ierr))
            if ierr.value != 0 :
                raise ValueError(
                    "gmshModelOccSynchronize returned non-zero error code : ",
                    ierr.value)


class view:
    """
    Post-processing view functions
    """

    @staticmethod
    def add(name,tag=-1):
        """
        Adds a new post-processing view, with name `name'. If `tag' is positive use
        it (and remove the view with that tag if it already exists), otherwise
        associate a new tag. Returns the view tag.

        return int
        """
        ierr = c_int()
        api__result__ = lib.gmshViewAdd(
            c_char_p(name.encode()),
            c_int(tag),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewAdd returned non-zero error code : ",
                ierr.value)
        return api__result__

    @staticmethod
    def remove(tag):
        """
        Removes the view with tag `tag'.
        """
        ierr = c_int()
        lib.gmshViewRemove(
            c_int(tag),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewRemove returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def getIndex(tag):
        """
        Gets the index of the view with tag `tag' in the list of currently loaded
        views. This dynamic index (it can change when views are removed) is used to
        access view options with the gmshOption functions.

        return int
        """
        ierr = c_int()
        api__result__ = lib.gmshViewGetIndex(
            c_int(tag),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewGetIndex returned non-zero error code : ",
                ierr.value)
        return api__result__

    @staticmethod
    def getTags():
        """
        Gets the tags of all views.

        return tags
        """
        api_tags_, api_tags_n_ = POINTER(c_int)(), c_size_t()
        ierr = c_int()
        lib.gmshViewGetTags(
            byref(api_tags_),byref(api_tags_n_),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewGetTags returned non-zero error code : ",
                ierr.value)
        return _ovectorint(api_tags_,api_tags_n_.value)

    @staticmethod
    def addModelData(tag,modelName,dataType,tags,data,step=0,time=0,numComponents=-1,partition=0):
        """
        Adds model-based post-processing data to the view with tag `tag'.
        `modelName' identifies the model the data is attached to. `dataType'
        specifies the type of data, currently either "NodeData", "ElementData" or
        "ElementNodeData". `tags' gives the tags of the vertices or elements in the
        mesh to which the data is associated. `data' is a vector of length
        `tags.size()`: each entry is the vector of double precision numbers
        representing the data associated with the corresponding tag. The optional
        `step` and `time` arguments associate a time step and time value with the
        data. `numComponents' gives the number of data components (1 for scalar
        data, 3 for vector data, etc.) per entity; if negative, it is automatically
        inferred (when possible) from the input data. `partition' allows to specify
        data in several sub-sets.
        """
        api_tags_, api_tags_n_ = _ivectorint(tags)
        api_data_, api_data_n_, api_data_nn_ = _ivectorvectordouble(data)
        ierr = c_int()
        lib.gmshViewAddModelData(
            c_int(tag),
            c_char_p(modelName.encode()),
            c_char_p(dataType.encode()),
            api_tags_, api_tags_n_,
            api_data_, api_data_n_, api_data_nn_,
            c_int(step),
            c_int(time),
            c_int(numComponents),
            c_int(partition),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewAddModelData returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def addListData(tag,type,numEle,data):
        """
        Adds list-based post-processing data to the view with tag `tag'. `type'
        identifies the data: "SP" for scalar points, "VP", for vector points, etc.
        `numEle' gives the number of elements in the data. `data' contains the data
        for the `numEle' elements.
        """
        api_data_, api_data_n_ = _ivectordouble(data)
        ierr = c_int()
        lib.gmshViewAddListData(
            c_int(tag),
            c_char_p(type.encode()),
            c_int(numEle),
            api_data_, api_data_n_,
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewAddListData returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def probe(tag,x,y,z,step=-1,numComp=-1,gradient=False,tolerance=0.,xElemCoord=[],yElemCoord=[],zElemCoord=[]):
        """
        Probes the view `tag' for its `value' at point (`x', `y', `z').

        return value
        """
        api_value_, api_value_n_ = POINTER(c_double)(), c_size_t()
        api_xElemCoord_, api_xElemCoord_n_ = _ivectordouble(xElemCoord)
        api_yElemCoord_, api_yElemCoord_n_ = _ivectordouble(yElemCoord)
        api_zElemCoord_, api_zElemCoord_n_ = _ivectordouble(zElemCoord)
        ierr = c_int()
        lib.gmshViewProbe(
            c_int(tag),
            c_double(x),
            c_double(y),
            c_double(z),
            byref(api_value_),byref(api_value_n_),
            c_int(step),
            c_int(numComp),
            c_int(bool(gradient)),
            c_double(tolerance),
            api_xElemCoord_, api_xElemCoord_n_,
            api_yElemCoord_, api_yElemCoord_n_,
            api_zElemCoord_, api_zElemCoord_n_,
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewProbe returned non-zero error code : ",
                ierr.value)
        return _ovectordouble(api_value_,api_value_n_.value)

    @staticmethod
    def write(tag,fileName,append=False):
        """
        Writes the view to a file. The export format is determined by the file
        extension.
        """
        ierr = c_int()
        lib.gmshViewWrite(
            c_int(tag),
            c_char_p(fileName.encode()),
            c_int(bool(append)),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshViewWrite returned non-zero error code : ",
                ierr.value)


class plugin:
    """
    Plugin functions
    """

    @staticmethod
    def setNumber(name,option,value):
        """
        Sets the numerical option `option` to the value `value' for plugin `name'.
        """
        ierr = c_int()
        lib.gmshPluginSetNumber(
            c_char_p(name.encode()),
            c_char_p(option.encode()),
            c_double(value),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshPluginSetNumber returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def setString(name,option,value):
        """
        Sets the string option `option` to the value `value' for plugin `name'.
        """
        ierr = c_int()
        lib.gmshPluginSetString(
            c_char_p(name.encode()),
            c_char_p(option.encode()),
            c_char_p(value.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshPluginSetString returned non-zero error code : ",
                ierr.value)

    @staticmethod
    def run(name):
        """
        Runs the plugin `name'.
        """
        ierr = c_int()
        lib.gmshPluginRun(
            c_char_p(name.encode()),
            byref(ierr))
        if ierr.value != 0 :
            raise ValueError(
                "gmshPluginRun returned non-zero error code : ",
                ierr.value)
